// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: threadsnet.proto

package threads_net_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetHostIDRequest struct {
}

func (m *GetHostIDRequest) Reset()         { *m = GetHostIDRequest{} }
func (m *GetHostIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetHostIDRequest) ProtoMessage()    {}
func (*GetHostIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{0}
}
func (m *GetHostIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHostIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHostIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHostIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostIDRequest.Merge(m, src)
}
func (m *GetHostIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHostIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostIDRequest proto.InternalMessageInfo

type GetHostIDReply struct {
	PeerID []byte `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *GetHostIDReply) Reset()         { *m = GetHostIDReply{} }
func (m *GetHostIDReply) String() string { return proto.CompactTextString(m) }
func (*GetHostIDReply) ProtoMessage()    {}
func (*GetHostIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{1}
}
func (m *GetHostIDReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHostIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHostIDReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHostIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostIDReply.Merge(m, src)
}
func (m *GetHostIDReply) XXX_Size() int {
	return m.Size()
}
func (m *GetHostIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostIDReply proto.InternalMessageInfo

func (m *GetHostIDReply) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type GetTokenRequest struct {
	// Types that are valid to be assigned to Payload:
	//	*GetTokenRequest_Key
	//	*GetTokenRequest_Signature
	Payload isGetTokenRequestPayload `protobuf_oneof:"payload"`
}

func (m *GetTokenRequest) Reset()         { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()    {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{2}
}
func (m *GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenRequest.Merge(m, src)
}
func (m *GetTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenRequest proto.InternalMessageInfo

type isGetTokenRequestPayload interface {
	isGetTokenRequestPayload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetTokenRequest_Key struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
}
type GetTokenRequest_Signature struct {
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (*GetTokenRequest_Key) isGetTokenRequestPayload()       {}
func (*GetTokenRequest_Signature) isGetTokenRequestPayload() {}

func (m *GetTokenRequest) GetPayload() isGetTokenRequestPayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetTokenRequest) GetKey() string {
	if x, ok := m.GetPayload().(*GetTokenRequest_Key); ok {
		return x.Key
	}
	return ""
}

func (m *GetTokenRequest) GetSignature() []byte {
	if x, ok := m.GetPayload().(*GetTokenRequest_Signature); ok {
		return x.Signature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetTokenRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetTokenRequest_Key)(nil),
		(*GetTokenRequest_Signature)(nil),
	}
}

type GetTokenReply struct {
	// Types that are valid to be assigned to Payload:
	//	*GetTokenReply_Challenge
	//	*GetTokenReply_Token
	Payload isGetTokenReplyPayload `protobuf_oneof:"payload"`
}

func (m *GetTokenReply) Reset()         { *m = GetTokenReply{} }
func (m *GetTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetTokenReply) ProtoMessage()    {}
func (*GetTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{3}
}
func (m *GetTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenReply.Merge(m, src)
}
func (m *GetTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenReply proto.InternalMessageInfo

type isGetTokenReplyPayload interface {
	isGetTokenReplyPayload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetTokenReply_Challenge struct {
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof" json:"challenge,omitempty"`
}
type GetTokenReply_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*GetTokenReply_Challenge) isGetTokenReplyPayload() {}
func (*GetTokenReply_Token) isGetTokenReplyPayload()     {}

func (m *GetTokenReply) GetPayload() isGetTokenReplyPayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetTokenReply) GetChallenge() []byte {
	if x, ok := m.GetPayload().(*GetTokenReply_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (m *GetTokenReply) GetToken() string {
	if x, ok := m.GetPayload().(*GetTokenReply_Token); ok {
		return x.Token
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetTokenReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetTokenReply_Challenge)(nil),
		(*GetTokenReply_Token)(nil),
	}
}

type CreateThreadRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	Keys     *Keys  `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (m *CreateThreadRequest) Reset()         { *m = CreateThreadRequest{} }
func (m *CreateThreadRequest) String() string { return proto.CompactTextString(m) }
func (*CreateThreadRequest) ProtoMessage()    {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{4}
}
func (m *CreateThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThreadRequest.Merge(m, src)
}
func (m *CreateThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThreadRequest proto.InternalMessageInfo

func (m *CreateThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *CreateThreadRequest) GetKeys() *Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Keys struct {
	ThreadKey []byte `protobuf:"bytes,1,opt,name=threadKey,proto3" json:"threadKey,omitempty"`
	LogKey    []byte `protobuf:"bytes,2,opt,name=logKey,proto3" json:"logKey,omitempty"`
}

func (m *Keys) Reset()         { *m = Keys{} }
func (m *Keys) String() string { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()    {}
func (*Keys) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{5}
}
func (m *Keys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keys.Merge(m, src)
}
func (m *Keys) XXX_Size() int {
	return m.Size()
}
func (m *Keys) XXX_DiscardUnknown() {
	xxx_messageInfo_Keys.DiscardUnknown(m)
}

var xxx_messageInfo_Keys proto.InternalMessageInfo

func (m *Keys) GetThreadKey() []byte {
	if m != nil {
		return m.ThreadKey
	}
	return nil
}

func (m *Keys) GetLogKey() []byte {
	if m != nil {
		return m.LogKey
	}
	return nil
}

type ThreadInfoReply struct {
	ThreadID  []byte     `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	ThreadKey []byte     `protobuf:"bytes,2,opt,name=threadKey,proto3" json:"threadKey,omitempty"`
	Logs      []*LogInfo `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	Addrs     [][]byte   `protobuf:"bytes,4,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *ThreadInfoReply) Reset()         { *m = ThreadInfoReply{} }
func (m *ThreadInfoReply) String() string { return proto.CompactTextString(m) }
func (*ThreadInfoReply) ProtoMessage()    {}
func (*ThreadInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{6}
}
func (m *ThreadInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadInfoReply.Merge(m, src)
}
func (m *ThreadInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *ThreadInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadInfoReply proto.InternalMessageInfo

func (m *ThreadInfoReply) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *ThreadInfoReply) GetThreadKey() []byte {
	if m != nil {
		return m.ThreadKey
	}
	return nil
}

func (m *ThreadInfoReply) GetLogs() []*LogInfo {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ThreadInfoReply) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type LogInfo struct {
	ID      []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PubKey  []byte   `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	PrivKey []byte   `protobuf:"bytes,3,opt,name=privKey,proto3" json:"privKey,omitempty"`
	Addrs   [][]byte `protobuf:"bytes,4,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Head    []byte   `protobuf:"bytes,5,opt,name=head,proto3" json:"head,omitempty"`
	Counter []byte   `protobuf:"bytes,6,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *LogInfo) Reset()         { *m = LogInfo{} }
func (m *LogInfo) String() string { return proto.CompactTextString(m) }
func (*LogInfo) ProtoMessage()    {}
func (*LogInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{7}
}
func (m *LogInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogInfo.Merge(m, src)
}
func (m *LogInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogInfo proto.InternalMessageInfo

func (m *LogInfo) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *LogInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *LogInfo) GetPrivKey() []byte {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *LogInfo) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *LogInfo) GetHead() []byte {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *LogInfo) GetCounter() []byte {
	if m != nil {
		return m.Counter
	}
	return nil
}

type AddThreadRequest struct {
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Keys *Keys  `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (m *AddThreadRequest) Reset()         { *m = AddThreadRequest{} }
func (m *AddThreadRequest) String() string { return proto.CompactTextString(m) }
func (*AddThreadRequest) ProtoMessage()    {}
func (*AddThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{8}
}
func (m *AddThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddThreadRequest.Merge(m, src)
}
func (m *AddThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddThreadRequest proto.InternalMessageInfo

func (m *AddThreadRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddThreadRequest) GetKeys() *Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GetThreadRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
}

func (m *GetThreadRequest) Reset()         { *m = GetThreadRequest{} }
func (m *GetThreadRequest) String() string { return proto.CompactTextString(m) }
func (*GetThreadRequest) ProtoMessage()    {}
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{9}
}
func (m *GetThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThreadRequest.Merge(m, src)
}
func (m *GetThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetThreadRequest proto.InternalMessageInfo

func (m *GetThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

type PullThreadRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
}

func (m *PullThreadRequest) Reset()         { *m = PullThreadRequest{} }
func (m *PullThreadRequest) String() string { return proto.CompactTextString(m) }
func (*PullThreadRequest) ProtoMessage()    {}
func (*PullThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{10}
}
func (m *PullThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullThreadRequest.Merge(m, src)
}
func (m *PullThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullThreadRequest proto.InternalMessageInfo

func (m *PullThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

type PullThreadReply struct {
}

func (m *PullThreadReply) Reset()         { *m = PullThreadReply{} }
func (m *PullThreadReply) String() string { return proto.CompactTextString(m) }
func (*PullThreadReply) ProtoMessage()    {}
func (*PullThreadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{11}
}
func (m *PullThreadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullThreadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullThreadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullThreadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullThreadReply.Merge(m, src)
}
func (m *PullThreadReply) XXX_Size() int {
	return m.Size()
}
func (m *PullThreadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PullThreadReply.DiscardUnknown(m)
}

var xxx_messageInfo_PullThreadReply proto.InternalMessageInfo

type DeleteThreadRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
}

func (m *DeleteThreadRequest) Reset()         { *m = DeleteThreadRequest{} }
func (m *DeleteThreadRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteThreadRequest) ProtoMessage()    {}
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{12}
}
func (m *DeleteThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteThreadRequest.Merge(m, src)
}
func (m *DeleteThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteThreadRequest proto.InternalMessageInfo

func (m *DeleteThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

type DeleteThreadReply struct {
}

func (m *DeleteThreadReply) Reset()         { *m = DeleteThreadReply{} }
func (m *DeleteThreadReply) String() string { return proto.CompactTextString(m) }
func (*DeleteThreadReply) ProtoMessage()    {}
func (*DeleteThreadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{13}
}
func (m *DeleteThreadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteThreadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteThreadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteThreadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteThreadReply.Merge(m, src)
}
func (m *DeleteThreadReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteThreadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteThreadReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteThreadReply proto.InternalMessageInfo

type AddReplicatorRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	Addr     []byte `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *AddReplicatorRequest) Reset()         { *m = AddReplicatorRequest{} }
func (m *AddReplicatorRequest) String() string { return proto.CompactTextString(m) }
func (*AddReplicatorRequest) ProtoMessage()    {}
func (*AddReplicatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{14}
}
func (m *AddReplicatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReplicatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReplicatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReplicatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReplicatorRequest.Merge(m, src)
}
func (m *AddReplicatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddReplicatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReplicatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddReplicatorRequest proto.InternalMessageInfo

func (m *AddReplicatorRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *AddReplicatorRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

type AddReplicatorReply struct {
	PeerID []byte `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *AddReplicatorReply) Reset()         { *m = AddReplicatorReply{} }
func (m *AddReplicatorReply) String() string { return proto.CompactTextString(m) }
func (*AddReplicatorReply) ProtoMessage()    {}
func (*AddReplicatorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{15}
}
func (m *AddReplicatorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReplicatorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReplicatorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReplicatorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReplicatorReply.Merge(m, src)
}
func (m *AddReplicatorReply) XXX_Size() int {
	return m.Size()
}
func (m *AddReplicatorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReplicatorReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddReplicatorReply proto.InternalMessageInfo

func (m *AddReplicatorReply) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type CreateRecordRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	Body     []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CreateRecordRequest) Reset()         { *m = CreateRecordRequest{} }
func (m *CreateRecordRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRecordRequest) ProtoMessage()    {}
func (*CreateRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{16}
}
func (m *CreateRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRecordRequest.Merge(m, src)
}
func (m *CreateRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRecordRequest proto.InternalMessageInfo

func (m *CreateRecordRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *CreateRecordRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type NewRecordReply struct {
	ThreadID []byte  `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	LogID    []byte  `protobuf:"bytes,2,opt,name=logID,proto3" json:"logID,omitempty"`
	Record   *Record `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *NewRecordReply) Reset()         { *m = NewRecordReply{} }
func (m *NewRecordReply) String() string { return proto.CompactTextString(m) }
func (*NewRecordReply) ProtoMessage()    {}
func (*NewRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{17}
}
func (m *NewRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRecordReply.Merge(m, src)
}
func (m *NewRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *NewRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_NewRecordReply proto.InternalMessageInfo

func (m *NewRecordReply) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *NewRecordReply) GetLogID() []byte {
	if m != nil {
		return m.LogID
	}
	return nil
}

func (m *NewRecordReply) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type AddRecordRequest struct {
	ThreadID []byte  `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	LogID    []byte  `protobuf:"bytes,2,opt,name=logID,proto3" json:"logID,omitempty"`
	Record   *Record `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *AddRecordRequest) Reset()         { *m = AddRecordRequest{} }
func (m *AddRecordRequest) String() string { return proto.CompactTextString(m) }
func (*AddRecordRequest) ProtoMessage()    {}
func (*AddRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{18}
}
func (m *AddRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecordRequest.Merge(m, src)
}
func (m *AddRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecordRequest proto.InternalMessageInfo

func (m *AddRecordRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *AddRecordRequest) GetLogID() []byte {
	if m != nil {
		return m.LogID
	}
	return nil
}

func (m *AddRecordRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Record struct {
	RecordNode []byte `protobuf:"bytes,1,opt,name=recordNode,proto3" json:"recordNode,omitempty"`
	EventNode  []byte `protobuf:"bytes,2,opt,name=eventNode,proto3" json:"eventNode,omitempty"`
	HeaderNode []byte `protobuf:"bytes,3,opt,name=headerNode,proto3" json:"headerNode,omitempty"`
	BodyNode   []byte `protobuf:"bytes,4,opt,name=bodyNode,proto3" json:"bodyNode,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{19}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetRecordNode() []byte {
	if m != nil {
		return m.RecordNode
	}
	return nil
}

func (m *Record) GetEventNode() []byte {
	if m != nil {
		return m.EventNode
	}
	return nil
}

func (m *Record) GetHeaderNode() []byte {
	if m != nil {
		return m.HeaderNode
	}
	return nil
}

func (m *Record) GetBodyNode() []byte {
	if m != nil {
		return m.BodyNode
	}
	return nil
}

type AddRecordReply struct {
}

func (m *AddRecordReply) Reset()         { *m = AddRecordReply{} }
func (m *AddRecordReply) String() string { return proto.CompactTextString(m) }
func (*AddRecordReply) ProtoMessage()    {}
func (*AddRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{20}
}
func (m *AddRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecordReply.Merge(m, src)
}
func (m *AddRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *AddRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecordReply proto.InternalMessageInfo

type GetRecordRequest struct {
	ThreadID []byte `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	RecordID []byte `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
}

func (m *GetRecordRequest) Reset()         { *m = GetRecordRequest{} }
func (m *GetRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GetRecordRequest) ProtoMessage()    {}
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{21}
}
func (m *GetRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordRequest.Merge(m, src)
}
func (m *GetRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordRequest proto.InternalMessageInfo

func (m *GetRecordRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *GetRecordRequest) GetRecordID() []byte {
	if m != nil {
		return m.RecordID
	}
	return nil
}

type GetRecordReply struct {
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *GetRecordReply) Reset()         { *m = GetRecordReply{} }
func (m *GetRecordReply) String() string { return proto.CompactTextString(m) }
func (*GetRecordReply) ProtoMessage()    {}
func (*GetRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{22}
}
func (m *GetRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordReply.Merge(m, src)
}
func (m *GetRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *GetRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordReply proto.InternalMessageInfo

func (m *GetRecordReply) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type SubscribeRequest struct {
	ThreadIDs [][]byte `protobuf:"bytes,1,rep,name=threadIDs,proto3" json:"threadIDs,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{23}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetThreadIDs() [][]byte {
	if m != nil {
		return m.ThreadIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*GetHostIDRequest)(nil), "threads.net.pb.GetHostIDRequest")
	proto.RegisterType((*GetHostIDReply)(nil), "threads.net.pb.GetHostIDReply")
	proto.RegisterType((*GetTokenRequest)(nil), "threads.net.pb.GetTokenRequest")
	proto.RegisterType((*GetTokenReply)(nil), "threads.net.pb.GetTokenReply")
	proto.RegisterType((*CreateThreadRequest)(nil), "threads.net.pb.CreateThreadRequest")
	proto.RegisterType((*Keys)(nil), "threads.net.pb.Keys")
	proto.RegisterType((*ThreadInfoReply)(nil), "threads.net.pb.ThreadInfoReply")
	proto.RegisterType((*LogInfo)(nil), "threads.net.pb.LogInfo")
	proto.RegisterType((*AddThreadRequest)(nil), "threads.net.pb.AddThreadRequest")
	proto.RegisterType((*GetThreadRequest)(nil), "threads.net.pb.GetThreadRequest")
	proto.RegisterType((*PullThreadRequest)(nil), "threads.net.pb.PullThreadRequest")
	proto.RegisterType((*PullThreadReply)(nil), "threads.net.pb.PullThreadReply")
	proto.RegisterType((*DeleteThreadRequest)(nil), "threads.net.pb.DeleteThreadRequest")
	proto.RegisterType((*DeleteThreadReply)(nil), "threads.net.pb.DeleteThreadReply")
	proto.RegisterType((*AddReplicatorRequest)(nil), "threads.net.pb.AddReplicatorRequest")
	proto.RegisterType((*AddReplicatorReply)(nil), "threads.net.pb.AddReplicatorReply")
	proto.RegisterType((*CreateRecordRequest)(nil), "threads.net.pb.CreateRecordRequest")
	proto.RegisterType((*NewRecordReply)(nil), "threads.net.pb.NewRecordReply")
	proto.RegisterType((*AddRecordRequest)(nil), "threads.net.pb.AddRecordRequest")
	proto.RegisterType((*Record)(nil), "threads.net.pb.Record")
	proto.RegisterType((*AddRecordReply)(nil), "threads.net.pb.AddRecordReply")
	proto.RegisterType((*GetRecordRequest)(nil), "threads.net.pb.GetRecordRequest")
	proto.RegisterType((*GetRecordReply)(nil), "threads.net.pb.GetRecordReply")
	proto.RegisterType((*SubscribeRequest)(nil), "threads.net.pb.SubscribeRequest")
}

func init() { proto.RegisterFile("threadsnet.proto", fileDescriptor_0a395cd12426f651) }

var fileDescriptor_0a395cd12426f651 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xb7, 0x93, 0x34, 0xa9, 0x5f, 0xb3, 0x69, 0x3a, 0x8d, 0x8a, 0x15, 0xc0, 0x64, 0x07, 0x0e,
	0x91, 0x40, 0xa1, 0x84, 0x2b, 0x07, 0x52, 0x52, 0x36, 0x61, 0x51, 0x08, 0xde, 0x80, 0x90, 0xf6,
	0xb0, 0x72, 0xe2, 0x21, 0x8d, 0x6a, 0x79, 0x82, 0x3d, 0x59, 0xc8, 0x95, 0x0f, 0x00, 0x7c, 0x06,
	0x3e, 0x0d, 0xc7, 0x3d, 0x72, 0x44, 0xed, 0xc7, 0xe0, 0x82, 0x66, 0xc6, 0x76, 0xfc, 0xaf, 0x89,
	0x2b, 0x71, 0xf3, 0x7b, 0xf3, 0xe6, 0xf7, 0xfe, 0xcc, 0x7b, 0xbf, 0x67, 0x68, 0xb2, 0x1b, 0x8f,
	0x58, 0xb6, 0xef, 0x12, 0xd6, 0x5b, 0x7b, 0x94, 0x51, 0xd4, 0x08, 0x34, 0x3d, 0xa1, 0x9a, 0x63,
	0x04, 0xcd, 0x67, 0x84, 0x8d, 0xa8, 0xcf, 0xc6, 0x43, 0x93, 0xfc, 0xb4, 0x21, 0x3e, 0xc3, 0x5d,
	0x68, 0xc4, 0x74, 0x6b, 0x67, 0x8b, 0x2e, 0xa0, 0xba, 0x26, 0xc4, 0x1b, 0x0f, 0x75, 0xb5, 0xa3,
	0x76, 0xeb, 0x66, 0x20, 0xe1, 0x29, 0x9c, 0x3e, 0x23, 0x6c, 0x46, 0x6f, 0x89, 0x1b, 0x5c, 0x46,
	0x08, 0xca, 0xb7, 0x64, 0x2b, 0xec, 0xb4, 0x91, 0x62, 0x72, 0x01, 0x19, 0xa0, 0xf9, 0xab, 0xa5,
	0x6b, 0xb1, 0x8d, 0x47, 0xf4, 0x12, 0x47, 0x18, 0x29, 0xe6, 0x4e, 0x75, 0xa5, 0x41, 0x6d, 0x6d,
	0x6d, 0x1d, 0x6a, 0xd9, 0xd8, 0x84, 0x27, 0x3b, 0x44, 0xee, 0xda, 0x00, 0x6d, 0x71, 0x63, 0x39,
	0x0e, 0x71, 0x97, 0x44, 0x7a, 0xe7, 0x77, 0x23, 0x15, 0xba, 0x80, 0x23, 0xc6, 0xad, 0x05, 0x2e,
	0xf7, 0x28, 0xc5, 0x38, 0xe6, 0x4b, 0x38, 0xff, 0xc2, 0x23, 0x16, 0x23, 0x33, 0x91, 0x7b, 0x18,
	0x69, 0x1b, 0x8e, 0x65, 0x31, 0xa2, 0xb4, 0x22, 0x19, 0x75, 0xa1, 0x72, 0x4b, 0xb6, 0xbe, 0x00,
	0x3d, 0xe9, 0xb7, 0x7a, 0xc9, 0xaa, 0xf5, 0x9e, 0x93, 0xad, 0x6f, 0x0a, 0x0b, 0xfc, 0x19, 0x54,
	0xb8, 0x84, 0xde, 0x01, 0x4d, 0x1a, 0x3d, 0x0f, 0xb2, 0xaf, 0x9b, 0x3b, 0x05, 0x2f, 0xa0, 0x43,
	0x97, 0xfc, 0xa8, 0x24, 0x0b, 0x28, 0x25, 0xfc, 0x9b, 0x0a, 0xa7, 0x32, 0xaa, 0xb1, 0xfb, 0x23,
	0x95, 0x19, 0xef, 0x8b, 0x2b, 0xe1, 0xa5, 0x94, 0xf6, 0xf2, 0x21, 0x54, 0x1c, 0xba, 0xf4, 0xf5,
	0x72, 0xa7, 0xdc, 0x3d, 0xe9, 0xbf, 0x95, 0x8e, 0xfa, 0x6b, 0xba, 0x14, 0x5e, 0x84, 0x11, 0x6a,
	0xc1, 0x91, 0x65, 0xdb, 0x9e, 0xaf, 0x57, 0x3a, 0xe5, 0x6e, 0xdd, 0x94, 0x02, 0xfe, 0x5d, 0x85,
	0x5a, 0x60, 0x87, 0x1a, 0x50, 0x8a, 0x42, 0x28, 0x8d, 0x87, 0xa2, 0x0b, 0x36, 0xf3, 0x58, 0x12,
	0x52, 0x42, 0x3a, 0xd4, 0xd6, 0xde, 0xea, 0x35, 0x3f, 0x28, 0x8b, 0x83, 0x50, 0xcc, 0xf7, 0x81,
	0x10, 0x54, 0x6e, 0x88, 0x65, 0xeb, 0x47, 0xc2, 0x58, 0x7c, 0x73, 0x8c, 0x05, 0xdd, 0xb8, 0x8c,
	0x78, 0x7a, 0x55, 0x62, 0x04, 0x22, 0x9e, 0x42, 0x73, 0x60, 0xdb, 0xc9, 0xa7, 0x43, 0x50, 0xe1,
	0x50, 0x41, 0x6c, 0xe2, 0xfb, 0x11, 0x4f, 0xd6, 0x13, 0x3d, 0x5f, 0xb8, 0x19, 0xf0, 0xc7, 0x70,
	0x36, 0xdd, 0x38, 0x4e, 0xf1, 0x0b, 0x67, 0x70, 0x1a, 0xbf, 0xb0, 0x76, 0xb6, 0xf8, 0x13, 0x38,
	0x1f, 0x12, 0x87, 0x3c, 0xa2, 0x07, 0xf1, 0x39, 0x9c, 0x25, 0xaf, 0x70, 0x9c, 0x2f, 0xa1, 0x35,
	0xb0, 0xc5, 0xf7, 0x6a, 0x61, 0x31, 0xea, 0x15, 0x69, 0xe6, 0xb0, 0x5a, 0xa5, 0x5d, 0xb5, 0xf0,
	0x47, 0x80, 0x52, 0x38, 0xfb, 0xe6, 0xfc, 0x3a, 0x9c, 0x20, 0x93, 0x2c, 0xa8, 0x67, 0x17, 0x74,
	0x3a, 0xa7, 0x76, 0xd8, 0x2a, 0xe2, 0x1b, 0x7b, 0xd0, 0x98, 0x90, 0x9f, 0x43, 0x8c, 0x43, 0xbd,
	0xde, 0x82, 0x23, 0x87, 0x2e, 0xc7, 0xc3, 0x00, 0x42, 0x0a, 0xa8, 0x07, 0x55, 0x4f, 0x00, 0x88,
	0x5e, 0x3b, 0xe9, 0x5f, 0xa4, 0x1f, 0x3a, 0x80, 0x0f, 0xac, 0x30, 0x13, 0xed, 0x53, 0x3c, 0xee,
	0xff, 0xc7, 0xeb, 0xaf, 0x2a, 0x54, 0xa5, 0x0a, 0x19, 0x00, 0x52, 0x39, 0xa1, 0x76, 0xc0, 0x60,
	0x66, 0x4c, 0xc3, 0x47, 0x9a, 0xbc, 0x26, 0x2e, 0x13, 0xc7, 0xc1, 0x48, 0x47, 0x0a, 0x7e, 0x9b,
	0xcf, 0x07, 0xf1, 0xc4, 0xb1, 0x1c, 0xaf, 0x98, 0x86, 0xa7, 0xc2, 0x4b, 0x2b, 0x4e, 0x2b, 0x32,
	0x95, 0x50, 0xc6, 0x4d, 0x68, 0xc4, 0x52, 0xe7, 0xdd, 0xf3, 0x95, 0xe8, 0xfc, 0xe2, 0xc5, 0x68,
	0xc3, 0xb1, 0x8c, 0x34, 0xaa, 0x47, 0x24, 0xe3, 0xcf, 0xc5, 0x96, 0x88, 0x3f, 0xe6, 0xae, 0x48,
	0x6a, 0xa1, 0x22, 0x5d, 0x42, 0xf3, 0xc5, 0x66, 0xee, 0x2f, 0xbc, 0xd5, 0x9c, 0x84, 0xd1, 0x44,
	0x04, 0x37, 0x1e, 0xfa, 0xba, 0x2a, 0x58, 0x63, 0xa7, 0xe8, 0xff, 0x5b, 0x83, 0xf2, 0x60, 0x3a,
	0x46, 0xdf, 0x80, 0x16, 0x6d, 0x28, 0xd4, 0x49, 0xbb, 0x49, 0x2f, 0xb4, 0xb6, 0xb1, 0xc7, 0x82,
	0x97, 0x45, 0x41, 0x53, 0x38, 0x0e, 0xd7, 0x0e, 0x7a, 0x2f, 0xc7, 0x3a, 0xbe, 0xe2, 0xda, 0xef,
	0x3e, 0x6c, 0x20, 0xd0, 0xba, 0xea, 0xa5, 0x8a, 0xbe, 0x87, 0x7a, 0x7c, 0xe9, 0xa0, 0xf7, 0xd3,
	0x97, 0x72, 0x56, 0x52, 0x3b, 0xe3, 0x3a, 0xb5, 0x1b, 0x44, 0xa4, 0x5a, 0x44, 0x87, 0xd9, 0xd4,
	0xd3, 0x4c, 0x59, 0x10, 0x31, 0xa2, 0xc3, 0xdc, 0x62, 0x3e, 0x1a, 0xd1, 0x04, 0xd8, 0xf1, 0x1f,
	0x7a, 0x9a, 0xbe, 0x90, 0x21, 0xd3, 0x2c, 0x66, 0x9a, 0x3e, 0x15, 0xf4, 0x03, 0xd4, 0xe3, 0x6c,
	0x98, 0xad, 0x67, 0x0e, 0xbd, 0xb6, 0x9f, 0xee, 0x37, 0x92, 0xc8, 0x2f, 0xe1, 0x49, 0x82, 0x0a,
	0xd1, 0x07, 0x39, 0x55, 0xcd, 0x30, 0x6e, 0x1b, 0x1f, 0xb0, 0x92, 0xe0, 0xdf, 0x85, 0x6d, 0x10,
	0xb0, 0xc1, 0x03, 0x6d, 0x90, 0x18, 0xc9, 0x6c, 0xbf, 0x26, 0x59, 0x13, 0x2b, 0x7c, 0x00, 0xa2,
	0xd1, 0xce, 0xed, 0x82, 0x03, 0x80, 0x29, 0x5e, 0x50, 0x82, 0x89, 0x7a, 0x08, 0x30, 0x4d, 0x1a,
	0xb9, 0x13, 0x95, 0x04, 0xfc, 0x16, 0xb4, 0x68, 0xb8, 0xb3, 0x80, 0xe9, 0xb9, 0x3f, 0x9c, 0xf2,
	0xa5, 0x7a, 0x35, 0xfd, 0xeb, 0xce, 0x50, 0xdf, 0xdc, 0x19, 0xea, 0x3f, 0x77, 0x86, 0xfa, 0xc7,
	0xbd, 0xa1, 0xbc, 0xb9, 0x37, 0x94, 0xbf, 0xef, 0x0d, 0x05, 0xde, 0x5e, 0xd1, 0x1e, 0x23, 0xbf,
	0xb0, 0x95, 0x43, 0x42, 0x9c, 0x57, 0x2e, 0x61, 0xaf, 0x96, 0xde, 0x7a, 0x71, 0x05, 0xf2, 0xb9,
	0xfd, 0x09, 0x61, 0x53, 0xf5, 0xcf, 0x12, 0xcc, 0x46, 0xe6, 0xf5, 0x60, 0xf8, 0x62, 0x72, 0x3d,
	0x9b, 0x57, 0xc5, 0x4f, 0xf1, 0xa7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x46, 0xb9, 0xe9, 0x06,
	0x28, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	GetHostID(ctx context.Context, in *GetHostIDRequest, opts ...grpc.CallOption) (*GetHostIDReply, error)
	GetToken(ctx context.Context, opts ...grpc.CallOption) (API_GetTokenClient, error)
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error)
	AddThread(ctx context.Context, in *AddThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error)
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error)
	PullThread(ctx context.Context, in *PullThreadRequest, opts ...grpc.CallOption) (*PullThreadReply, error)
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadReply, error)
	AddReplicator(ctx context.Context, in *AddReplicatorRequest, opts ...grpc.CallOption) (*AddReplicatorReply, error)
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*NewRecordReply, error)
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordReply, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordReply, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetHostID(ctx context.Context, in *GetHostIDRequest, opts ...grpc.CallOption) (*GetHostIDReply, error) {
	out := new(GetHostIDReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/GetHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetToken(ctx context.Context, opts ...grpc.CallOption) (API_GetTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/threads.net.pb.API/GetToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetTokenClient{stream}
	return x, nil
}

type API_GetTokenClient interface {
	Send(*GetTokenRequest) error
	Recv() (*GetTokenReply, error)
	grpc.ClientStream
}

type aPIGetTokenClient struct {
	grpc.ClientStream
}

func (x *aPIGetTokenClient) Send(m *GetTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIGetTokenClient) Recv() (*GetTokenReply, error) {
	m := new(GetTokenReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error) {
	out := new(ThreadInfoReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddThread(ctx context.Context, in *AddThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error) {
	out := new(ThreadInfoReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/AddThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error) {
	out := new(ThreadInfoReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PullThread(ctx context.Context, in *PullThreadRequest, opts ...grpc.CallOption) (*PullThreadReply, error) {
	out := new(PullThreadReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/PullThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadReply, error) {
	out := new(DeleteThreadReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/DeleteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddReplicator(ctx context.Context, in *AddReplicatorRequest, opts ...grpc.CallOption) (*AddReplicatorReply, error) {
	out := new(AddReplicatorReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/AddReplicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*NewRecordReply, error) {
	out := new(NewRecordReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordReply, error) {
	out := new(AddRecordReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordReply, error) {
	out := new(GetRecordReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/threads.net.pb.API/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeClient interface {
	Recv() (*NewRecordReply, error)
	grpc.ClientStream
}

type aPISubscribeClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeClient) Recv() (*NewRecordReply, error) {
	m := new(NewRecordReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	GetHostID(context.Context, *GetHostIDRequest) (*GetHostIDReply, error)
	GetToken(API_GetTokenServer) error
	CreateThread(context.Context, *CreateThreadRequest) (*ThreadInfoReply, error)
	AddThread(context.Context, *AddThreadRequest) (*ThreadInfoReply, error)
	GetThread(context.Context, *GetThreadRequest) (*ThreadInfoReply, error)
	PullThread(context.Context, *PullThreadRequest) (*PullThreadReply, error)
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadReply, error)
	AddReplicator(context.Context, *AddReplicatorRequest) (*AddReplicatorReply, error)
	CreateRecord(context.Context, *CreateRecordRequest) (*NewRecordReply, error)
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordReply, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordReply, error)
	Subscribe(*SubscribeRequest, API_SubscribeServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) GetHostID(ctx context.Context, req *GetHostIDRequest) (*GetHostIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostID not implemented")
}
func (*UnimplementedAPIServer) GetToken(srv API_GetTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedAPIServer) CreateThread(ctx context.Context, req *CreateThreadRequest) (*ThreadInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (*UnimplementedAPIServer) AddThread(ctx context.Context, req *AddThreadRequest) (*ThreadInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddThread not implemented")
}
func (*UnimplementedAPIServer) GetThread(ctx context.Context, req *GetThreadRequest) (*ThreadInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (*UnimplementedAPIServer) PullThread(ctx context.Context, req *PullThreadRequest) (*PullThreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullThread not implemented")
}
func (*UnimplementedAPIServer) DeleteThread(ctx context.Context, req *DeleteThreadRequest) (*DeleteThreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (*UnimplementedAPIServer) AddReplicator(ctx context.Context, req *AddReplicatorRequest) (*AddReplicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicator not implemented")
}
func (*UnimplementedAPIServer) CreateRecord(ctx context.Context, req *CreateRecordRequest) (*NewRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (*UnimplementedAPIServer) AddRecord(ctx context.Context, req *AddRecordRequest) (*AddRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (*UnimplementedAPIServer) GetRecord(ctx context.Context, req *GetRecordRequest) (*GetRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedAPIServer) Subscribe(req *SubscribeRequest, srv API_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/GetHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHostID(ctx, req.(*GetHostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).GetToken(&aPIGetTokenServer{stream})
}

type API_GetTokenServer interface {
	Send(*GetTokenReply) error
	Recv() (*GetTokenRequest, error)
	grpc.ServerStream
}

type aPIGetTokenServer struct {
	grpc.ServerStream
}

func (x *aPIGetTokenServer) Send(m *GetTokenReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIGetTokenServer) Recv() (*GetTokenRequest, error) {
	m := new(GetTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/AddThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddThread(ctx, req.(*AddThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PullThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PullThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/PullThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PullThread(ctx, req.(*PullThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddReplicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddReplicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/AddReplicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddReplicator(ctx, req.(*AddReplicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Subscribe(m, &aPISubscribeServer{stream})
}

type API_SubscribeServer interface {
	Send(*NewRecordReply) error
	grpc.ServerStream
}

type aPISubscribeServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeServer) Send(m *NewRecordReply) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "threads.net.pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostID",
			Handler:    _API_GetHostID_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _API_CreateThread_Handler,
		},
		{
			MethodName: "AddThread",
			Handler:    _API_AddThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _API_GetThread_Handler,
		},
		{
			MethodName: "PullThread",
			Handler:    _API_PullThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _API_DeleteThread_Handler,
		},
		{
			MethodName: "AddReplicator",
			Handler:    _API_AddReplicator_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _API_CreateRecord_Handler,
		},
		{
			MethodName: "AddRecord",
			Handler:    _API_AddRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _API_GetRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetToken",
			Handler:       _API_GetToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _API_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "threadsnet.proto",
}

func (m *GetHostIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHostIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHostIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetHostIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHostIDReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHostIDReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTokenRequest_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenRequest_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *GetTokenRequest_Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenRequest_Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Signature != nil {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTokenReply_Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenReply_Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Challenge != nil {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GetTokenReply_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenReply_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Token)
	copy(dAtA[i:], m.Token)
	i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Token)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *CreateThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreadsnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogKey) > 0 {
		i -= len(m.LogKey)
		copy(dAtA[i:], m.LogKey)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.LogKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadKey) > 0 {
		i -= len(m.ThreadKey)
		copy(dAtA[i:], m.ThreadKey)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreadInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThreadsnet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ThreadKey) > 0 {
		i -= len(m.ThreadKey)
		copy(dAtA[i:], m.ThreadKey)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counter) > 0 {
		i -= len(m.Counter)
		copy(dAtA[i:], m.Counter)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Counter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Head) > 0 {
		i -= len(m.Head)
		copy(dAtA[i:], m.Head)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Head)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PrivKey) > 0 {
		i -= len(m.PrivKey)
		copy(dAtA[i:], m.PrivKey)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.PrivKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreadsnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullThreadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullThreadReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullThreadReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteThreadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteThreadReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteThreadReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddReplicatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReplicatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReplicatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddReplicatorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReplicatorReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReplicatorReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreadsnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LogID) > 0 {
		i -= len(m.LogID)
		copy(dAtA[i:], m.LogID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.LogID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreadsnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LogID) > 0 {
		i -= len(m.LogID)
		copy(dAtA[i:], m.LogID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.LogID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BodyNode) > 0 {
		i -= len(m.BodyNode)
		copy(dAtA[i:], m.BodyNode)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.BodyNode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HeaderNode) > 0 {
		i -= len(m.HeaderNode)
		copy(dAtA[i:], m.HeaderNode)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.HeaderNode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventNode) > 0 {
		i -= len(m.EventNode)
		copy(dAtA[i:], m.EventNode)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.EventNode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordNode) > 0 {
		i -= len(m.RecordNode)
		copy(dAtA[i:], m.RecordNode)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.RecordNode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordID) > 0 {
		i -= len(m.RecordID)
		copy(dAtA[i:], m.RecordID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.RecordID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadID) > 0 {
		i -= len(m.ThreadID)
		copy(dAtA[i:], m.ThreadID)
		i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreadsnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThreadIDs) > 0 {
		for iNdEx := len(m.ThreadIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ThreadIDs[iNdEx])
			copy(dAtA[i:], m.ThreadIDs[iNdEx])
			i = encodeVarintThreadsnet(dAtA, i, uint64(len(m.ThreadIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintThreadsnet(dAtA []byte, offset int, v uint64) int {
	offset -= sovThreadsnet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetHostIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetHostIDReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *GetTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *GetTokenRequest_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovThreadsnet(uint64(l))
	return n
}
func (m *GetTokenRequest_Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}
func (m *GetTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *GetTokenReply_Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge != nil {
		l = len(m.Challenge)
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}
func (m *GetTokenReply_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	n += 1 + l + sovThreadsnet(uint64(l))
	return n
}
func (m *CreateThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *Keys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadKey)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.LogKey)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *ThreadInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.ThreadKey)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovThreadsnet(uint64(l))
		}
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovThreadsnet(uint64(l))
		}
	}
	return n
}

func (m *LogInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.PrivKey)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovThreadsnet(uint64(l))
		}
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.Counter)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *AddThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *GetThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *PullThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *PullThreadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *DeleteThreadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddReplicatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *AddReplicatorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *CreateRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *NewRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.LogID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *AddRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.LogID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordNode)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.EventNode)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.HeaderNode)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.BodyNode)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *AddRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	l = len(m.RecordID)
	if l > 0 {
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *GetRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovThreadsnet(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ThreadIDs) > 0 {
		for _, b := range m.ThreadIDs {
			l = len(b)
			n += 1 + l + sovThreadsnet(uint64(l))
		}
	}
	return n
}

func sovThreadsnet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozThreadsnet(x uint64) (n int) {
	return sovThreadsnet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetHostIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHostIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHostIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHostIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHostIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHostIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = append(m.PeerID[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerID == nil {
				m.PeerID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &GetTokenRequest_Key{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Payload = &GetTokenRequest_Signature{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Payload = &GetTokenReply_Challenge{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &GetTokenReply_Token{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &Keys{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadKey = append(m.ThreadKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadKey == nil {
				m.ThreadKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogKey = append(m.LogKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LogKey == nil {
				m.LogKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadKey = append(m.ThreadKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadKey == nil {
				m.ThreadKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &LogInfo{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivKey = append(m.PrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivKey == nil {
				m.PrivKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = append(m.Head[:0], dAtA[iNdEx:postIndex]...)
			if m.Head == nil {
				m.Head = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counter = append(m.Counter[:0], dAtA[iNdEx:postIndex]...)
			if m.Counter == nil {
				m.Counter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &Keys{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullThreadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullThreadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullThreadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThreadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThreadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThreadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReplicatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReplicatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReplicatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReplicatorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReplicatorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReplicatorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = append(m.PeerID[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerID == nil {
				m.PeerID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogID = append(m.LogID[:0], dAtA[iNdEx:postIndex]...)
			if m.LogID == nil {
				m.LogID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogID = append(m.LogID[:0], dAtA[iNdEx:postIndex]...)
			if m.LogID == nil {
				m.LogID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordNode = append(m.RecordNode[:0], dAtA[iNdEx:postIndex]...)
			if m.RecordNode == nil {
				m.RecordNode = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventNode = append(m.EventNode[:0], dAtA[iNdEx:postIndex]...)
			if m.EventNode == nil {
				m.EventNode = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderNode = append(m.HeaderNode[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderNode == nil {
				m.HeaderNode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyNode = append(m.BodyNode[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyNode == nil {
				m.BodyNode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = append(m.ThreadID[:0], dAtA[iNdEx:postIndex]...)
			if m.ThreadID == nil {
				m.ThreadID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordID = append(m.RecordID[:0], dAtA[iNdEx:postIndex]...)
			if m.RecordID == nil {
				m.RecordID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreadsnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadIDs = append(m.ThreadIDs, make([]byte, postIndex-iNdEx))
			copy(m.ThreadIDs[len(m.ThreadIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreadsnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThreadsnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThreadsnet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThreadsnet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreadsnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThreadsnet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupThreadsnet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthThreadsnet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthThreadsnet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThreadsnet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupThreadsnet = fmt.Errorf("proto: unexpected end of group")
)
